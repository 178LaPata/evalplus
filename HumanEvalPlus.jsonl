{"contract": "\n    assert threshold > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n", "base_input": [[[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3], [[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05], [[1.0, 2.0, 5.9, 4.0, 5.0], 0.95], [[1.0, 2.0, 5.9, 4.0, 5.0], 0.8], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1], [[1.1, 2.2, 3.1, 4.1, 5.1], 1.0], [[1.1, 2.2, 3.1, 4.1, 5.1], 0.5]], "atol": 0}
{"contract": "\n    cnt = 0 # $_CONTRACT_$\n    for ch in paren_string: # $_CONTRACT_$\n        assert ch in [\"(\", \")\", \" \"], \"invalid inputs\"  # $_CONTRACT_$\n        if ch == \"(\": cnt += 1 # $_CONTRACT_$\n        if ch == \")\": cnt -= 1 # $_CONTRACT_$\n        assert cnt >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n", "base_input": [["(()()) ((())) () ((())()())"], ["() (()) ((())) (((())))"], ["(()(())((())))"], ["( ) (( )) (( )( ))"]], "atol": 0}
{"contract": "\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return number - int(number)\n\n", "base_input": [[3.5], [1.33], [123.456]], "atol": 1e-06}
{"contract": "", "reference": "\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n", "base_input": [[[]], [[1, 2, -3, 1, 2, -3]], [[1, 2, -4, 5, 6]], [[1, -1, 2, -2, 5, -5, 4, -4]], [[1, -1, 2, -2, 5, -5, 4, -5]], [[1, -2, 2, -2, 5, -5, 4, -4]]], "atol": 0}
{"contract": "\n    assert numbers != [], \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n", "base_input": [[[1.0, 2.0, 3.0]], [[1.0, 2.0, 3.0, 4.0]], [[1.0, 2.0, 3.0, 4.0, 5.0]]], "atol": 1e-06}
{"contract": "", "reference": "\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n", "base_input": [[[], 7], [[5, 6, 3, 2], 8], [[2, 2, 2], 2]], "atol": 0}
{"contract": "\n    cnt = 0 # $_CONTRACT_$\n    for ch in paren_string: # $_CONTRACT_$\n        assert ch in [\"(\", \")\", \" \"], \"invalid inputs\"  # $_CONTRACT_$\n        if ch == \"(\": cnt += 1 # $_CONTRACT_$\n        if ch == \")\": cnt -= 1 # $_CONTRACT_$\n        assert cnt >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n", "base_input": [["(()()) ((())) () ((())()())"], ["() (()) ((())) (((())))"], ["(()(())((())))"]], "atol": 0}
{"contract": "", "reference": "\n    return list(filter(lambda s: substring in s, strings))\n\n", "base_input": [[[], "john"], [["xxx", "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx"], [["xxx", "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"], "xx"], [["grunt", "trumpet", "prune", "gruesome"], "run"]], "atol": 0}
{"contract": "", "reference": "\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n", "base_input": [[[]], [[1, 1, 1]], [[100, 0]], [[3, 5, 7]], [[10]]], "atol": 0}
{"contract": "", "reference": "\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n", "base_input": [[[]], [[1, 2, 3, 4]], [[4, 3, 2, 1]], [[3, 2, 3, 100, 3]]], "atol": 0}
{"contract": "\n    assert type(string) == str, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n", "base_input": [[""], ["x"], ["xyz"], ["xyx"], ["jerry"]], "atol": 0}
{"contract": "\n    assert len(a) == len(b), \"invalid inputs\" # $_CONTRACT_$\n    assert set(a).issubset({\"0\", \"1\"}) and set(b).issubset({\"0\", \"1\"}), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n", "base_input": [["111000", "101010"], ["1", "1"], ["0101", "0000"]], "atol": 0}
{"contract": "", "reference": "\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n", "base_input": [[[]], [["x", "y", "z"]], [["x", "yyy", "zzzz", "www", "kkkk", "abc"]]], "atol": 0}
{"contract": "\n    assert a > 0 and b > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n", "base_input": [[3, 7], [10, 15], [49, 14], [144, 60]], "atol": 0}
{"contract": "", "reference": "\n    return [string[:(i + 1)] for i in range(len(string))]\n\n", "base_input": [[""], ["asdfgh"], ["WWW"]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return \" \".join(map(str, range(n + 1)))\n\n", "base_input": [[0], [3], [10]], "atol": 0}
{"contract": "", "reference": "\n    return len(set(string.lower()))\n\n", "base_input": [[""], ["abcde"], ["abcdecadeCADE"], ["aaaaAAAAaaaa"], ["Jerry jERRY JeRRRY"]], "atol": 0}
{"contract": "\n    assert music_string == \"\" or all(map(lambda x: x in [\"o\", \"o|\", \".|\"], music_string.split(\" \"))), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n", "base_input": [[""], ["o o o o"], [".| .| .| .|"], ["o| o| .| .| o o o o"], ["o| .| o| .| o o| o o|"]], "atol": 0}
{"contract": "\n    assert substring != \"\", \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n", "base_input": [["", "x"], ["xyxyxyx", "x"], ["cacacacac", "cac"], ["john doe", "john"]], "atol": 0}
{"contract": "\n    assert numbers == \"\" or all(map(lambda x: x in [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"], numbers.split(\" \"))), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n", "base_input": [[""], ["three"], ["three five nine"], ["five zero four seven nine eight"], ["six five four three two one zero"]], "atol": 0}
{"contract": "\n    assert len(numbers) >= 2, \"invalid inputs\"  # $_CONTRACT_$\n", "reference": "\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n", "base_input": [[[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]], [[1.0, 2.0, 5.9, 4.0, 5.0]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], [[1.1, 2.2, 3.1, 4.1, 5.1]]], "atol": 0}
{"contract": "\n    assert len(numbers) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert max(numbers) > min(numbers), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n", "base_input": [[[2.0, 49.9]], [[100.0, 49.9]], [[1.0, 2.0, 3.0, 4.0, 5.0]], [[2.0, 1.0, 5.0, 3.0, 4.0]], [[12.0, 11.0, 15.0, 13.0, 14.0]]], "atol": 0}
{"contract": "", "reference": "\n    return list(filter(lambda x: type(x) == int, values))\n\n", "base_input": [[[]], [[4, {}, [], 23.2, 9, "adasd"]], [[3, "c", 3, 3, "a", "b"]]], "atol": 0}
{"contract": "", "reference": "\n    return len(string)\n\n", "base_input": [[""], ["x"], ["asdasnakj"]], "atol": 0}
{"contract": "\n    assert n > 1, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n", "base_input": [[3], [7], [10], [100], [49]], "atol": 0}
{"contract": "\n    assert n >= 2, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n", "base_input": [[2], [4], [8], [57], [3249], [185193], [20577], [18]], "atol": 0}
{"contract": "\n    assert type(numbers) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in numbers), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n", "base_input": [[[]], [[1, 2, 3, 4]], [[1, 2, 3, 2, 4, 3, 5]]], "atol": 0}
{"contract": "\n    assert type(string) == str, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n", "base_input": [[""], ["Hello!"], ["These violent delights have violent ends"]], "atol": 0}
{"contract": "", "reference": "\n    return \"\".join(strings)\n\n", "base_input": [[[]], [["x", "y", "z"]], [["x", "y", "z", "w", "k"]]], "atol": 0}
{"contract": "", "reference": "\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "base_input": [[[], "john"], [["xxx", "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx"]], "atol": 0}
{"contract": "", "reference": "\n    return list(filter(lambda x: x > 0, l))\n\n", "base_input": [[[-1, -2, 4, 5, 6]], [[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]], [[-1, -2]], [[]]], "atol": 0}
{"contract": "", "reference": "\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n", "base_input": [[6], [101], [11], [13441], [61], [4], [1], [5], [11], [17], [85], [77], [255379]], "atol": 0}
{"contract": "\n    assert len(xs) > 0 and len(xs) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n", "base_input": [[[-10, -2]], [[-3, -6, -7, 7]], [[8, 3]], [[-10, -8]], [[-3, 6, 9, -10]], [[10, 7, 3, -3]], [[8, -2, -10, -5, 3, 1, -2, -6]], [[1, -7, -8, 2]], [[1, 1]], [[-9, 4, 7, -7, 2, -8]], [[10, 9, 1, 8, -4, -8]], [[-3, -1]], [[-3, -7]], [[-2, 4, 10, 1, -5, 1, 1, -4]], [[10, -8, 9, 10, -5, 7]], [[-5, 4, 2, -2]], [[1, -9, -3, -9]], [[2, -2, -8, -4, 8, 1]], [[10, 5, 2, 10]], [[-6, -2, -6, -3, 7, 7, -2, 8]], [[8, 2, 1, -3, -6, 6, 5, -8]], [[-7, -6]], [[3, 9, -8, 2]], [[9, 4, 6, -2, 7, -10, -7, 7]], [[10, 1, -7, -1, 3, -5]], [[-10, -2, 6, -5, 6, -7, 10, -1]], [[-6, 1, -5, 7]], [[9, 1]], [[-10, -7, 1, -1, -3, -9, -3, 8]], [[-8, 5]], [[7, -6]], [[5, 7, -5, -2]], [[-4, 7, -4, -1, 2, 10, 1, 4]], [[-7, -3, -3, -8, 1, -10, 8, 7]], [[8, -3, -10, -8]], [[-3, -8]], [[1, -8]], [[-2, 5, -4, 7]], [[8, 8, 5, -3]], [[3, -4, -7, -7, 3, 1, 3, 3]], [[-9, 10, 10, -7, -9, 2, 1, -7]], [[-4, -4, 7, 4]], [[3, -5, -2, 4]], [[-8, 4, 7, -7]], [[10, 7]], [[-8, -3]], [[3, 5, 5, -4]], [[-9, -5, 2, -10, 2, -2, 4, -1]], [[7, 5, -6, -4, -1, -4, -9, 8]], [[1, -9]], [[8, 5]], [[-9, 6, -8, -5]], [[9, -8]], [[2, -7, 8, -3]], [[9, -8]], [[8, 8, 6, 1, -2, -4, 1, -3]], [[2, -6, 10, -1, 4, 1]], [[-10, 4]], [[-8, 7]], [[6, -2, -6, 1]], [[-3, 1]], [[-5, 4, 7, -1, 9, 10]], [[7, -1]], [[-6, -2]], [[-7, 7]], [[-2, -1, 9, -4]], [[-4, 10, -2, 6, 5, -2]], [[-8, 10]], [[-2, -9, -10, 1, -6, 10, -2, -5]], [[7, 3, 7, -10, -7, -8, -6, 7]], [[1, 8]], [[3, -6, -9, -1]], [[-9, 1, -4, -3, -7, 1]], [[9, -6, -3, -5, -5, 3, -10, -5]], [[3, -3, -2, -5, -7, 2]], [[5, -3]], [[4, 1, -1, -3]], [[-10, -4, 2, 1]], [[-8, -2, 1, 10, 6, 2]], [[-10, -7, -2, -5, 8, -2]], [[-7, 9]], [[1, 1, 3, 9, 6, -7, 2, 8]], [[-2, -9, 3, -10]], [[1, 3, -8, 1]], [[-7, -1, 6, -1, 3, 1]], [[-1, 7, -6, -4, 3, 2, -5, 9]], [[2, 7, -10, -1, -1, -4]], [[8, 9, 10, 1, 4, 4, 4, -4]], [[-5, -8, -1, 6, 10, 9, 1, -8]], [[-1, -3, -4, -6]], [[-9, -3]], [[9, -8, 4, 3, 10, 8, -4, 2]], [[2, -3, -6, 10, -10, -7, 3, -3]], [[6, 4, -9, 7]], [[-7, 4, -6, 4]], [[4, 9, 6, 3, 7, 4]], [[5, 4, -2, -3]], [[6, 5, 10, -3, -2, 4]], [[-1, -3]], [[1, 1, 7, -8, -6, -6]]], "atol": 0.0001}
{"contract": "", "reference": "\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n", "base_input": [[[1, 2, 3]], [[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]], [[5, 6, 3, 4, 8, 9, 2]], [[5, 8, 3, 4, 6, 9, 2]], [[5, 6, 9, 4, 8, 3, 2]], [[5, 6, 3, 4, 8, 9, 2, 1]]], "atol": 0}
{"contract": "", "reference": "\n    return sorted(set(l))\n\n", "base_input": [[[5, 3, 5, 2, 3, 3, 9, 0, 123]]], "atol": 0}
{"contract": "", "reference": "\n    assert type(l) == list, \"invalid inputs\"\n    assert all(type(x) in [int, float] for x in l), \"invalid inputs\"\n    return max(l)\n\n", "base_input": [[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]]], "atol": 0}
{"contract": "", "reference": "\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n", "base_input": [[50], [78], [79], [100], [200], [4000], [10000], [100000]], "atol": 0}
{"contract": "\n    assert type(l) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n", "base_input": [[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]]], "atol": 0}
{"contract": "", "reference": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n", "base_input": [["pefhjxfqwsuvnt"], ["jhlvcnxdejzjmeipdren"], ["iqdttryxxmfiamxpepwx"], ["fdjwlrmvsrpugthyq"], ["jfnbmrbvdnvkoyhhuuyv"], ["voftzeuydtqvwg"], ["ikmysgpqvyh"], ["ymdtjyjjmox"], ["ryhcjrilscdfebwf"], ["mbojjhacngqjkrrj"], ["czvnqquxhoasklzqdli"], ["rqtjkhtrgbjz"], ["tlkbekhtrhdnlqllmi"], ["ywzkmjisnksefbepd"], ["lrluupfzaagqkgub"], ["gbgzlefhjw"], ["zvtwbxemevedhahtxkvj"], ["afheefondbnp"], ["zrasxlpzzqtsfzwfjy"], ["abtvgafcqdllmqvjka"], ["vpagmemhjqwudt"], ["tokonlllyolcgtkvoime"], ["pouqpjpbiqgywdiwyxj"], ["gioktkzgmn"], ["rcpvumpoydf"], ["mlwzyluyow"], ["idtdftlfrdeyuxwywo"], ["lpswvdopdnvydjo"], ["dkfzacmrkco"], ["uxwuasqqqqcrq"], ["ehutzxuxfebot"], ["amakkgvawn"], ["roclfzttkpxnkrkinwn"], ["bmstpcellm"], ["uhbhwavjfacubqm"], ["rvkxswxbbmg"], ["mjvyqetwpzppacnhssxn"], ["xjyzlukbqvlcp"], ["lasrqhpknpwqlakuqcrc"], ["raqypraioffzjmtyju"], ["tfyawdioyfemkns"], ["nukgjifpxjmlxahu"], ["tikdscnujbsgzcqq"], ["rjqbyvtxmtybfplstqou"], ["octhukwxlpx"], ["reueqbaoosgsodci"], ["ilwcxovmljceponjnmyy"], ["lmjxtuvgexcnjspki"], ["mffuotkbvv"], ["mmilojxmax"], ["fifscnuvkkfzali"], ["hyllouekag"], ["isopmmeglkrl"], ["agrezqqhqr"], ["eenmcyrydjssvzkgwk"], ["pihjnevzqwgfgqdilmsr"], ["yyhorsomposufhlp"], ["rmdzgyfyrrkxqkmzgvnf"], ["elijdkcgohqav"], ["urzcbibwpqzfwdsvb"], ["jjjldlccmlkjo"], ["tjlgcjtyctdowhyeyti"], ["mymugxkyovypfg"], ["vatzjhnizwhdkmlvik"], ["opmjrdwcbybimezgia"], ["uwwkckpabowuawmpd"], ["bvfdtyykrszocq"], ["uysrxgmlgskyh"], ["qbkbjiuxebrpsimlue"], ["oortaynwoffmmgxh"], ["whnyearizxpdyluum"], ["nlbllqxdlhdgrdcfjgj"], ["ojvklzpeattlhmels"], ["evolvwiuil"], ["dqwjhmcdpmynfqpxp"], ["zcbibbdvjl"], ["vkgufkohyicssyffkwe"], ["mchfvvwrxgeauxxqfogu"], ["mlokzqtopfuetj"], ["bsvkwpeaqc"], ["ntdfqkapwrczkctj"], ["flbkcomfgnzfu"], ["ojskeombjxmfbqdjkqy"], ["ryrpopfxfaekjdjho"], ["qcxhrtdchetl"], ["kvlbhugwvlucccbvb"], ["ucuxqrydkeoloej"], ["jnseyktynzdhg"], ["aofkhumqxsukjw"], ["ayhjldzsflt"], ["rihhqxcvzittqa"], ["qlaqiqvkcj"], ["rvffijsdikk"], ["yjhnwnnttyatpwio"], ["wxsarkfhzvp"], ["knwzjgnggjk"], ["vybpofweynwn"], ["iyxjyotuzknmrbd"], ["scmfsroyzjrtyhn"], ["grmmohkhenfnrcmdoxa"]], "atol": 0}
{"contract": "\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= n <= 12, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n", "base_input": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]], "atol": 0}
{"contract": "", "reference": "\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n", "base_input": [[[1, 3, 5, 0]], [[1, 3, 5, -1]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[1, 2, 5, 7]], [[2, 4, -5, 3, 9, 7]], [[1]], [[1, 3, 5, -100]], [[100, 3, 5, -100]]], "atol": 0}
{"contract": "\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return n ** 2\n\n", "base_input": [[2], [3], [4], [8], [10]], "atol": 0}
{"contract": "", "reference": "\n    return [x + 1 for x in l]\n\n", "base_input": [[[]], [[3, 2, 1]], [[5, 2, 5, 2, 3, 3, 9, 0, 123]]], "atol": 0}
{"contract": "", "reference": "\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n", "base_input": [[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[-3, 9, -1, 3, 2, 30]], [[-3, 9, -1, 3, 2, 31]], [[-3, 9, -1, 4, 2, 30]], [[-3, 9, -1, 4, 2, 31]]], "atol": 0}
{"contract": "\n    assert x >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert 2 <= base <= 9, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n", "base_input": [[8, 3], [9, 3], [234, 2], [16, 2], [8, 2], [7, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], "atol": 0}
{"contract": "\n    assert a > 0 and h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return a * h / 2\n\n", "base_input": [[5, 3], [2, 2], [10, 8]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n", "base_input": [[5], [8], [10], [12]], "atol": 0}
{"contract": "\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n", "base_input": [[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[5]], [[6, 5]], [[8, 1, 3, 9, 9, 2, 7]]], "atol": 0}
{"contract": "", "reference": "\n    return text == text[::-1]\n\n", "base_input": [[""], ["aba"], ["aaaaa"], ["zbcd"], ["xywyx"], ["xywyz"], ["xywzx"]], "atol": 0}
{"contract": "\n    assert type(n) == int and type(p) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0 and p >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res\n\n", "base_input": [[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101], [30, 5], [31, 5]], "atol": 0}
{"contract": "\n    assert s == \"\" or s.islower(), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n", "base_input": [["ygbxalsohrihxnuciok"], ["netjllzlqlrbc"], ["zhekcxfgqeosrmo"], ["vbginqldplbmr"], ["ydceotwkdkdnefsej"], ["lwksnpwglhyuvpljt"], ["zhkmlwzywyaqlaczvgov"], ["hipzsrypghieyhvin"], ["mlgbfodffu"], ["korhypfrgtztrj"], ["nkidmkrbsujdahxbdgb"], ["jkqzxdvkhcwupoafhq"], ["vgawijqmokmen"], ["ovkedvnmflcgmeiwmpnj"], ["bkalmvgoirfyxexiqf"], ["kkfmczgxqakurwc"], ["lazoaysrsopnqmver"], ["iafmivpcujvbvxcef"], ["tamuydtqkxcnguozkyp"], ["xytyeiidfv"], ["geyzmghctrmujaab"], ["wiqwwbcbyibcjck"], ["xchjmiyxrjxgzwlw"], ["kybwuzlkmehgyio"], ["fpwaufemptcetes"], ["tssbspidevjgeb"], ["dlpvjbbxsrm"], ["byabjmozgl"], ["rjktiqjpjiihkd"], ["hxqfkgaefkkhotfcoup"], ["nzzojiwptsvtxvbd"], ["gsgkcpaskgxhppibpgzj"], ["thqjahjdrqy"], ["vgpofjleys"], ["flgwvsncmsvxukrrol"], ["mspwycqoqbpg"], ["iqayrzjlmx"], ["qbdmuupctspi"], ["xdfbilckrhpqdqbke"], ["vrszbwvwhadgjr"], ["kysjooclflciollplyge"], ["jebafodetbxjv"], ["tbkfqpogznsox"], ["fuzrgndqnxkal"], ["zzwmbneyasbx"], ["yjelkuqjrsaifycbaery"], ["cuebzdmzacfyahfb"], ["ruvzqzugpxpr"], ["kmbdsyhzoz"], ["bdiehdetha"], ["hiafsbgcbye"], ["zbygobbemdtnalp"], ["qbazkeyjsnbutvsg"], ["yudkkpyrhek"], ["yuorzryciskifjqrwscu"], ["njivyunsclyzkslophpp"], ["xxmnvbskpeldutfr"], ["raefuitkxpotasobgcm"], ["ohuprteegyggw"], ["rpfwcwxpajkeoliqm"], ["zsptuxjoqyrp"], ["kgqnyqbmklys"], ["ouvbelfrgk"], ["laqpnniwkexh"], ["kaqnythfemgvnohjgl"], ["yftodutgzqhzexvm"], ["manhnngjdtetqsl"], ["pdzqniuzckxwlwwd"], ["elwviftgsynl"], ["vrgqfkbjbcwpokyfjfq"], ["xsgaxchvdrnm"], ["rdjixzkgnddrvcoe"], ["olebpqtdizdojywr"], ["ldgefetpdschx"], ["cvkvdfuzzjc"], ["mfybovvpunsewytpap"], ["qcfjteydirshsdc"], ["itdpgaspwvnflsqjf"], ["hifukpmpitynbxhiay"], ["bzsxilswctwvqwpz"], ["hrirsadlxvqjoo"], ["xxxectzzejyhne"], ["cjzczezcpewnjf"], ["uxvmxcjoncuduhf"], ["jlyemsppqppa"], ["wliphevwgu"], ["ommhfvkwvgfmdvclvec"], ["bgwaitmilzqhpquoc"], ["diiyxuhevshffwhz"], ["lcudovxgioizm"], ["kqqzdexrsvclqdfpyow"], ["eyemotskrfhwynx"], ["xlqztmszjaqhsqhdrlt"], ["tnvmucjmwcvwshwq"], ["sludymfkvv"], ["tmkeoptbeoyxcelmlg"], ["ttdjvzdfcuekhtwvwqpn"], ["ezxpazdtuxkwgmlp"], ["dilyiynznumwpgwjgp"], ["rpphhskpzwgtrbglsf"]], "atol": 0}
{"contract": "", "reference": "\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n", "base_input": [[""], ["abcdef\nghijklm"], ["fedcba"], ["eeeee"], ["acBAA"], ["EcBOO"], ["ybcd"]], "atol": 0}
{"contract": "", "reference": "\n    return all(x < t for x in l)\n\n", "base_input": [[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[1, 20, 4, 10], 21], [[1, 20, 4, 10], 22], [[1, 8, 4, 10], 11], [[1, 8, 4, 10], 10]], "atol": 0}
{"contract": "", "reference": "\n    return x + y\n\n", "base_input": [[0, 1], [1, 0], [2, 3], [5, 7], [7, 5], [603, 569], [914, 18], [330, 890], [581, 228], [798, 764], [879, 259], [366, 404], [808, 466], [376, 617], [76, 786], [506, 892], [308, 179], [187, 440], [675, 610], [286, 171], [969, 795], [102, 776], [408, 110], [553, 470], [491, 464], [409, 392], [335, 628], [336, 642], [940, 441], [696, 571], [600, 510], [345, 773], [384, 702], [621, 955], [824, 217], [47, 357], [71, 577], [935, 90], [478, 107], [113, 516], [222, 348], [389, 246], [143, 303], [646, 771], [310, 189], [339, 232], [494, 650], [999, 730], [896, 145], [55, 735], [215, 27], [578, 781], [588, 579], [747, 339], [399, 878], [704, 89], [777, 103], [749, 144], [197, 367], [562, 485], [539, 260], [668, 71], [112, 20], [742, 428], [103, 41], [465, 946], [62, 409], [585, 669], [842, 997], [448, 191], [185, 221], [237, 466], [950, 825], [267, 131], [257, 230], [969, 335], [140, 466], [351, 401], [299, 322], [355, 186], [18, 182], [115, 852], [7, 34], [970, 619], [547, 395], [180, 755], [166, 918], [85, 341], [568, 277], [322, 118], [901, 598], [51, 575], [591, 48], [830, 322], [975, 49], [981, 339], [344, 344], [435, 39], [719, 25], [297, 432], [554, 152], [169, 676], [997, 931], [593, 999], [665, 695]], "atol": 0}
{"contract": "", "reference": "\n    return set(s0) == set(s1)\n\n", "base_input": [["eabcdzzzz", "dddzzzzzzzddeddabc"], ["abcd", "dddddddabc"], ["dddddddabc", "abcd"], ["eabcd", "dddddddabc"], ["abcd", "dddddddabcf"], ["eabcdzzzz", "dddzzzzzzzddddabc"], ["aabb", "aaccc"]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n", "base_input": [[10], [1], [8], [11], [12]], "atol": 0}
{"contract": "\n    assert all(x in \"<>\" for x in brackets) # $_CONTRACT_$\n", "reference": "\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "base_input": [["<>"], ["<<><>>"], ["<><><<><>><>"], ["<><><<<><><>><>><<><><<>>>"], ["<<<><>>>>"], ["><<>"], ["<"], ["<<<<"], [">"], ["<<>"], ["<><><<><>><>><<>"], ["<><><<><>><>>><>"]], "atol": 0}
{"contract": "\n    assert type(l) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n", "base_input": [[[1, 2, 4, 10]], [[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]], [[4, 1, 1, 0]], [[1, 2, 3, 2, 5, 60]], [[1, 2, 3, 4, 5, 60]], [[9, 9, 9, 9]]], "atol": 0}
{"contract": "", "reference": "\n    return sorted(list(set(l1).intersection(set(l2))))\n\n", "base_input": [[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[4, 3, 2, 8], [3, 2, 4]], [[4, 3, 2, 8], []]], "atol": 0}
{"contract": "\n    def is_prime(a): # $_CONTRACT_$\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) # $_CONTRACT_$\n    assert n > 1 and not is_prime(n), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n", "base_input": [[15], [27], [63], [330], [13195]], "atol": 0}
{"contract": "\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return (n + 1) * n // 2\n\n", "base_input": [[1], [6], [11], [30], [100]], "atol": 0}
{"contract": "\n    assert all(x in \"()\" for x in brackets) # $_CONTRACT_$\n", "reference": "\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "base_input": [["()"], ["(()())"], ["()()(()())()"], ["()()((()()())())(()()(()))"], ["((()())))"], [")(()"], ["("], ["(((("], [")"], ["(()"], ["()()(()())())(()"], ["()()(()())()))()"]], "atol": 0}
{"contract": "\n    assert len(xs) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n", "base_input": [[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[3, 2, 1]], [[3, 2, 1, 0, 4]], [[1]]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n", "base_input": [[2], [1], [5], [8], [10], [12], [14]], "atol": 0}
{"contract": "", "reference": "\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n", "base_input": [["abcde"], ["Alone"], ["key"], ["bye"], ["keY"], ["bYe"], ["ACEDY"]], "atol": 0}
{"contract": "\n    assert x >= 0 and shift >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n", "base_input": [[100, 2], [12, 2], [97, 8], [12, 1], [11, 101]], "atol": 0}
{"contract": "", "reference": "\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n", "base_input": [[""], ["abAB"], ["abcCd"], ["helloE"], ["woArBld"], ["aAaaaXa"], [" How are yOu?"], ["You arE Very Smart"]], "atol": 0}
{"contract": "\n    words = s.split(\" \") # $_CONTRACT_$\n    assert len(words) == 5, \"invalid inputs\" # $_CONTRACT_$\n    assert words[1] == \"apples\" and words[2] == \"and\" and words[4] == \"oranges\", \"invalid inputs\" # $_CONTRACT_$\n    assert words[0].isdigit() and words[3].isdigit(), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n", "base_input": [["5 apples and 6 oranges", 19], ["5 apples and 6 oranges", 21], ["0 apples and 1 oranges", 3], ["1 apples and 0 oranges", 3], ["2 apples and 3 oranges", 100], ["2 apples and 3 oranges", 5], ["1 apples and 100 oranges", 120]], "atol": 0}
{"contract": "\n    assert len(arr) <= 10000, \"invalid inputs\" # $_CONTRACT_$\n    assert all(val >= 0 for val in arr), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n", "base_input": [[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 2, 3, 0, 5, 3]], [[5, 4, 8, 4, 8]], [[7, 6, 7, 1]], [[7, 9, 7, 1]]], "atol": 0}
{"contract": "\n    assert min(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n", "base_input": [[[5, 5, 5, 5, 1]], [[4, 1, 4, 1, 4, 4]], [[3, 3]], [[8, 8, 8, 8, 8, 8, 8, 8]], [[2, 3, 3, 2, 2]], [[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]], [[3, 2, 8, 2]], [[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]], [[8, 8, 3, 6, 5, 6, 4]], [[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]], [[1, 9, 10, 1, 3]], [[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]], [[1]], [[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]], [[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]], [[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]], [[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]], [[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]], [[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]], [[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]], [[10]], [[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]], [[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]], [[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]], [[3, 10, 10, 9, 2]]], "atol": 0}
{"contract": "\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n", "base_input": [[[1, 2, 3, 4]], [[5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5]], [[5, 6, 7, 8, 9, 1]], [[5, 5, 5, 5]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[0, 2, 2, 2, 5, 5, -5, -5]], [[111111]]], "atol": 0}
{"contract": "\n    assert a > 0 and b > 0 and c > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n", "base_input": [[3, 4, 5], [1, 2, 10], [4, 8, 5], [2, 2, 2], [1, 2, 3], [10, 5, 7], [2, 6, 3], [1, 1, 1], [2, 2, 10]], "atol": 0}
{"contract": "\n    assert type(q) == list and all(type(x) in [int, float] for x in q), \"invalid inputs\" # $_CONTRACT_$\n    assert type(w) in [int, float], \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    return q == q[::-1] and sum(q) <= w\n\n", "base_input": [[[3, 2, 3], 9], [[1, 2], 5], [[3], 5], [[3, 2, 3], 1], [[1, 2, 3], 6], [[5], 5]], "atol": 0}
{"contract": "", "reference": "\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n", "base_input": [[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 4, 2]], [[1, 4, 4, 2]], [[1, 2, 3, 2, 1]], [[3, 1, 1, 3]], [[1]], [[0, 1]]], "atol": 0}
{"contract": "", "reference": "\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n", "base_input": [[[], []], [["hi", "admin"], ["hi", "hi"]], [["hi", "admin"], ["hi", "hi", "admin", "project"]], [["4"], ["1", "2", "3", "4", "5"]], [["hi", "admin"], ["hI", "Hi"]], [["hi", "admin"], ["hI", "hi", "hi"]], [["hi", "admin"], ["hI", "hi", "hii"]], [[], ["this"]], [["this"], []]], "atol": 0}
{"contract": "\n    assert type(a) == int, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n", "base_input": [[5], [30], [8], [10], [125], [105], [126], [729], [891], [1001]], "atol": 0}
{"contract": "\n    assert type(x) == int and type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n", "base_input": [[16, 2], [143214, 16], [4, 2], [9, 3], [16, 4], [24, 2], [128, 4], [12, 6], [1, 1], [1, 12]], "atol": 0}
{"contract": "", "reference": "\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n", "base_input": [[1], [1], [2], [2], [-1], [-1], [64], [64], [180], [180], [1000], [1000], [0], [0], [1729], [1728]], "atol": 0}
{"contract": "\n    assert all(x in \"0123456789ABCDEF\" for x in num), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n", "base_input": [["AB"], ["AB"], ["1077E"], ["1077E"], ["ABED1A33"], ["ABED1A33"], ["2020"], ["2020"], ["123456789ABCDEF0"], ["123456789ABCDEF0"], ["112233445566778899AABBCCDDEEFF00"], ["112233445566778899AABBCCDDEEFF00"], [[]]], "atol": 0}
{"contract": "\n    assert decimal >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n", "base_input": [[0], [32], [103], [15]], "atol": 0}
{"contract": "", "reference": "\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n", "base_input": [["a"], ["aa"], ["abcd"], ["aabb"], ["adb"], ["xyy"], ["iopaxpoi"], ["iopaxioi"]], "atol": 0}
{"contract": "\n    assert all(0.0 <= x <= 4.0 for x in grades), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n", "base_input": [[[4.0, 3, 1.7, 2, 3.5]], [[1.2]], [[0.5]], [[0.0]], [[1, 0.3, 1.5, 2.8, 3.3]], [[0, 0.7]]], "atol": 0}
{"contract": "", "reference": "\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n", "base_input": [["Hello"], ["abcdcba"], ["kittens"], ["orange"], ["wow"], ["world"], ["MadaM"], ["Wow"], [""], ["HI"], ["go"], ["gogo"], ["aaaaaaaaaaaaaaa"], ["Madam"], ["M"], ["0"]], "atol": 0}
{"contract": "\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if n == 1: return 1\n    return 18 * 10 ** (n - 2)\n\n", "base_input": [[1], [2], [3], [4], [5]], "atol": 0}
{"contract": "\n    assert 0 <= N <= 10000, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n", "base_input": [[1000], [150], [147], [333], [963]], "atol": 0}
{"contract": "\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n", "base_input": [[[4, 88]], [[4, 5, 6, 7, 2, 122]], [[4, 0, 6, 7]], [[4, 4, 6, 8]]], "atol": 0}
{"contract": "", "reference": "\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n", "base_input": [["Hi"], ["hello"], ["number"], ["abcd"], ["Hello World!!!"], [""], ["Hi. My name is Mister Robot. How are you?"]], "atol": 0}
{"contract": "", "reference": "\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n", "base_input": [[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2], [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[1]], 2], [[[], [1], [1, 2, 3]], 3]], "atol": 0}
{"contract": "\n    assert all(x >= 0 for x in array), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n", "base_input": [[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[2, 1]], [[15, 42, 87, 32, 11, 0]], [[21, 14, 23, 11]]], "atol": 0}
{"contract": "\n    assert s == \"\" or s.islower(), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n", "base_input": [["hi"], ["asdfghjkl"], ["gf"], ["et"], ["faewfawefaewg"], ["hellomyfriend"], ["dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"], ["a"]], "atol": 0}
{"contract": "", "reference": "\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n", "base_input": [[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[1, 1, 1, 1, 0]], [[1, 1]], [[-35, 34, 12, -45]]], "atol": 0}
{"contract": "", "reference": "\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n", "base_input": [["Hello world"], ["Is the sky blue?"], ["I love It !"], ["bIt"], ["I feel good today. I will be productive. will kill It"], ["You and I are going for a walk"]], "atol": 0}
{"contract": "", "reference": "\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n", "base_input": [[2, 3, 1], [2.5, 2, 3], [1.5, 5, 3.5], [2, 6, 2], [4, 2, 2], [2.2, 2.2, 2.2], [-4, 6, 2], [2, 1, 1], [3, 4, 7], [3.0, 4, 7]], "atol": 0}
{"contract": "\n    assert all(ch == \" \" or ch.isalpha() for ch in message), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n", "base_input": [["TEST"], ["Mudasir"], ["YES"], ["This is a message"], ["I DoNt KnOw WhAt tO WrItE"]], "atol": 0}
{"contract": "\n    def is_prime(a): # $_CONTRACT_$\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) # $_CONTRACT_$\n    assert any(is_prime(x) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n", "base_input": [[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[8191]], [[8191, 123456, 127, 7]], [[127, 97, 8192]]], "atol": 0}
{"contract": "", "reference": "\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n", "base_input": [[{"p": "pineapple", "b": "banana"}], [{"p": "pineapple", "b": "banana"}], [{"p": "pineapple", "A": "banana", "B": "banana"}], [{"p": "pineapple", "A": "banana", "B": "banana"}], [{"p": "pineapple", "5": "banana", "a": "apple"}], [{"p": "pineapple", "5": "banana", "a": "apple"}], [{"Name": "John", "Age": "36", "City": "Houston"}], [{"Name": "John", "Age": "36", "City": "Houston"}], [{"STATE": "NC", "ZIP": "12345"}], [{"STATE": "NC", "ZIP": "12345"}], [{"fruit": "Orange", "taste": "Sweet"}], [{"fruit": "Orange", "taste": "Sweet"}], [{}], [{}]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n", "base_input": [[5], [6], [7], [10], [0], [22], [1], [18], [47], [101]], "atol": 0}
{"contract": "", "reference": "\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n", "base_input": [[148, 412], [148, 412], [19, 28], [19, 28], [2020, 1851], [2020, 1851], [14, -15], [14, -15], [76, 67], [76, 67], [17, 27], [17, 27], [0, 1], [0, 1], [0, 0], [0, 0]], "atol": 0}
{"contract": "", "reference": "\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n", "base_input": [["aBCdEf"], ["abcdefg"], ["dBBE"], ["B"], ["U"], [""], ["EEEE"]], "atol": 0}
{"contract": "\n    try: # $_CONTRACT_$\n        assert isinstance(value, str) # $_CONTRACT_$\n        float(value) # $_CONTRACT_$\n    except: # $_CONTRACT_$\n        raise Exception(\"invalid inputs\") # $_CONTRACT_$\n", "reference": "\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n", "base_input": [["10"], ["14.5"], ["-15.5"], ["15.3"], ["0"]], "atol": 0}
{"contract": "\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ans, num = [], n\n    for _ in range(n):\n        ans.append(num)\n        num += 2\n    return ans\n\n", "base_input": [[3], [4], [5], [6], [8]], "atol": 0}
{"contract": "", "reference": "\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n", "base_input": [["Hi, my name is John"], ["One, two, three, four, five, six"], ["Hi, my name"], ["One,, two, three, four, five, six,"], [""], ["ahmed     , gamal"]], "atol": 0}
{"contract": "\n    assert x > 0 and y > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n", "base_input": [[12, 15], [13, 12], [33, 12354], [5234, 5233], [6, 29], [27, 10], [7, 7], [546, 546]], "atol": 0}
{"contract": "\n    assert type(n) == int and type(m) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0 and m > 0, \"invalid inputs\"  # $_CONTRACT_$\n", "reference": "\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n", "base_input": [[1, 5], [7, 13], [964, 977], [996, 997], [560, 851], [185, 546], [362, 496], [350, 902], [197, 233], [7, 5], [5, 1], [5, 5]], "atol": 0}
{"contract": "\n    assert all(num > 0 for num in x), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n", "base_input": [[[15, 33, 1422, 1]], [[152, 323, 1422, 10]], [[12345, 2033, 111, 151]], [[135, 103, 31]]], "atol": 0}
{"contract": "\n    assert all(type(x) == int for x in arr), \"invalid inputs\"  # $_CONTRACT_$\n", "reference": "\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n", "base_input": [[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]], [[1, -1, 3, 2]], [[9, 4, 8]]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n", "base_input": [[5], [7], [1], [3]], "atol": 0}
{"contract": "\n    assert 1 <= n <= 1000, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n", "base_input": [[123], [12], [3], [63], [25], [19], [9], [1]], "atol": 0}
{"contract": "", "reference": "\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n", "base_input": [[[]], [[-1, -2, 0]], [[1, 1, 2, -2, 3, 4, 5]], [[1, 6, 9, -6, 0, 1, 5]], [[1, 100, 98, -7, 1, -1]], [[12, 23, 34, -45, -56, 0]], [[0, 1]], [[1]]], "atol": 0}
{"contract": "\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert len(set(arr)) == len(arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n", "base_input": [[[3, 4, 5, 1, 2]], [[3, 5, 10, 1, 2]], [[4, 3, 1, 2]], [[3, 5, 4, 1, 2]], [[]]], "atol": 0}
{"contract": "\n    assert len(lst1) > 0 and len(lst2) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n", "base_input": [[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]], [[1, 2, 3, 4], [2, 1, 4, 3]], [[5, 7, 3], [2, 6, 4]], [[5, 7, 3], [2, 6, 3]], [[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]], [[100, 200], [200, 200]]], "atol": 0}
{"contract": "\n    words = test.split(\" \") # $_CONTRACT_$\n    for word in words: # $_CONTRACT_$\n        if word != \"\": # $_CONTRACT_$\n            assert len(word) == 1 and word.islower(), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n", "base_input": [["a b b a"], ["a b c a b"], ["a b c d g"], ["r t g"], ["b b b b a"], ["r t g"], [""], ["a"]], "atol": 0}
{"contract": "", "reference": "\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n", "base_input": [["abcde", "ae"], ["abcdef", "b"], ["abcdedcba", "ab"], ["dwik", "w"], ["a", "a"], ["abcdedcba", ""], ["abcdedcba", "v"], ["vabba", "v"], ["mamma", "mia"]], "atol": 0}
{"contract": "\n    assert all(s.isdigit() for s in lst), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n", "base_input": [[["1234567"]], [["3", "11111111"]], [["271", "137", "314"]]], "atol": 0}
{"contract": "\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n", "base_input": [[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]], [[-1, -2, -3, 2, -10]], [[-9999999999999999]], [[0, 10, 20, 1000000]], [[-1, -2, -3, 10, -5]], [[100, -1, -2, -3, 10, -5]], [[10, 11, 13, 8, 3, 4]], [[100, -33, 32, -1, 0, -2]], [[-10]], [[7]], [[1, -1]]], "atol": 0}
{"contract": "\n    assert 1 <= len(grid) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    lens = list(map(len, grid)) # $_CONTRACT_$\n    assert max(lens) == min(lens) and 1 <= max(lens) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    for l in grid: # $_CONTRACT_$\n        for x in l: # $_CONTRACT_$\n            assert x == 0 or x == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= capacity <= 10, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n", "base_input": [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "atol": 0}
{"contract": "\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n", "base_input": [[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]], [[]], [[2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]], [[3, 6, 44, 12, 32, 5]], [[2, 4, 8, 16, 32]], [[2, 4, 8, 16, 32]]], "atol": 0}
{"contract": "\n    assert all(ch == \" \" or ch.isalpha() for ch in s), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n", "base_input": [["Mary had a little lamb", 4], ["Mary had a little lamb", 4], ["Mary had a little lamb", 3], ["Mary had a little lamb", 3], ["simple white space", 2], ["simple white space", 2], ["Hello world", 4], ["Hello world", 4], ["Uncle sam", 3], ["Uncle sam", 3], ["", 4], ["", 4], ["a b c d e f", 1], ["a b c d e f", 1]], "atol": 0}
{"contract": "\n    assert word == \"\" or word.isalpha(), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n", "base_input": [["yogurt"], ["full"], ["easy"], ["eAsy"], ["ali"], ["bad"], ["most"], ["ab"], ["ba"], ["quick"], ["anime"], ["Asia"], ["Above"]], "atol": 0}
{"contract": "\n    assert len(lst) == 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(ch == \"(\" or ch == \")\" for ch in lst[0]), \"invalid inputs\" # $_CONTRACT_$\n    assert all(ch == \"(\" or ch == \")\" for ch in lst[1]), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n", "base_input": [[["()(", ")"]], [[")", ")"]], [["(()(())", "())())"]], [[")())", "(()()("]], [["(())))", "(()())(("]], [["()", "())"]], [["(()(", "()))()"]], [["((((", "((())"]], [[")(()", "(()("]], [[")(", ")("]], [["(", ")"]], [[")", "("]]], "atol": 0}
{"contract": "\n    assert 1 <= len(arr) <= 1000, \"invalid inputs\" # $_CONTRACT_$\n    assert all(-1000 <= x <= 1000 for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= k <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return sorted(sorted(arr)[::-1][:k])\n\n", "base_input": [[[-3, -4, 5], 3], [[4, -4, 4], 2], [[-3, 2, 1, 2, -1, -2, 1], 1], [[123, -123, 20, 0, 1, 2, -3], 3], [[-123, 20, 0, 1, 2, -3], 4], [[5, 15, 0, 3, -13, -8, 0], 7], [[-1, 0, 2, 5, 3, -10], 2], [[1, 0, 5, -7], 1], [[4, -4], 2], [[-10, 10], 2], [[1, 2, 3, -23, 243, -400, 0], 0]], "atol": 0}
{"contract": "\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n", "base_input": [[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[5, 9]], [[2, 4, 8]], [[30, 13, 23, 32]], [[3, 13, 2, 9]]], "atol": 0}
{"contract": "\n    assert 1 <= len(arr) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= k <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n", "base_input": [[[1, -2, -3, 41, 57, 76, 87, 88, 99], 3], [[111, 121, 3, 4000, 5, 6], 2], [[11, 21, 3, 90, 5, 6, 7, 8, 9], 4], [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[1], 1]], "atol": 0}
{"contract": "\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n", "base_input": [[14], [5], [12], [1]], "atol": 0}
{"contract": "", "reference": "\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n", "base_input": [["03-11-2000"], ["15-01-2012"], ["04-0-2040"], ["06-04-2020"], ["01-01-2007"], ["03-32-2011"], [""], ["04-31-3000"], ["06-06-2005"], ["21-31-2000"], ["04-12-2003"], ["04122003"], ["20030412"], ["2003-04"], ["2003-04-12"], ["04-2003"]], "atol": 0}
{"contract": "\n    assert type(txt) == str, \"invalid inputs\" # $_CONTRACT_$\n    assert not txt.startswith(\" \") and not txt.startswith(\",\") and not txt.endswith(\" \") and not txt.endswith(\",\"), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n", "base_input": [["Hello world!"], ["Hello,world!"], ["Hello world,!"], ["Hello,Hello,world !"], ["abcdef"], ["aaabb"], ["aaaBb"], [""]], "atol": 0}
{"contract": "\n    assert all(x >= 0 for x in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n", "base_input": [[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[]], [[1]], [[3, 2, 1]], [[1, 2, 2, 2, 3, 4]], [[1, 2, 3, 3, 3, 4]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 3, 4]]], "atol": 0}
{"contract": "\n    assert len(interval1) == 2 and interval1[0] <= interval1[1], \"invalid inputs\" # $_CONTRACT_$\n    assert len(interval2) == 2 and interval2[0] <= interval2[1], \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n", "base_input": [[[1, 2], [2, 3]], [[-1, 1], [0, 4]], [[-3, -1], [-5, 5]], [[-2, 2], [-4, 0]], [[-11, 2], [-1, -1]], [[1, 2], [3, 5]], [[1, 2], [1, 2]], [[-2, -2], [-3, -2]]], "atol": 0}
{"contract": "\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n", "base_input": [[[1, 2, 2, -4]], [[0, 1]], [[1, 1, 1, 2, 3, -1, 1]], [[]], [[2, 4, 1, 2, -1, -1, 9]], [[-1, 1, -1, 1]], [[-1, 1, 1, 1]], [[-1, 1, 1, 0]]], "atol": 0}
{"contract": "\n    assert k > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(grid) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(l) == len(grid) for l in grid), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n", "base_input": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4], [[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7], [[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5], [[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9], [[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12], [[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8], [[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8], [[[1, 2], [3, 4]], 10], [[[1, 3], [3, 2]], 10]], "atol": 0}
{"contract": "\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    ans = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            ans.append(1 + i / 2)\n        else:\n            ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2)\n    return ans\n\n", "base_input": [[3], [4], [5], [6], [7], [8], [9], [20], [0], [1]], "atol": 0}
{"contract": "\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n", "base_input": [[5], [54], [120], [5014], [98765], [5576543], [2468]], "atol": 0}
{"contract": "\n    assert all(ch == \"[\" or ch == \"]\" for ch in string), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n", "base_input": [["[[]]"], ["[]]]]]]][[[[[]"], ["[][]"], ["[]"], ["[[[[]]]]"], ["[]]]]]]]]]]"], ["[][][[]]"], ["[[]"], ["[]]"], ["[[]][["], ["[[][]]"], [""], ["[[[[[[[["], ["]]]]]]]]"]], "atol": 0}
{"contract": "", "reference": "\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n", "base_input": [[[1, 2, 3]], [[1.0, 2, 3]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]], [[100, 1, 15, 2]], [[10000, 10000]], [[-1.4, 4.6, 6.3]], [[-1.4, 17.9, 18.9, 19.9]], [[0]], [[-1]], [[-1, 1, 0]]], "atol": 0}
{"contract": "\n    assert type(txt) == str, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n", "base_input": [["apple"], ["apple pi e"], ["eeeee"], ["A"], ["Pumpkin pie "], ["Pumpkin pie 1"], [""], ["eeeee e "], ["apple pie"], ["apple pi e "]], "atol": 0}
{"contract": "\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) == len(set(arr)), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n", "base_input": [[[1, 2, 4, 3, 5]], [[1, 2, 4, 5]], [[1, 4, 2, 5, 6, 7, 8, 9, 10]], [[4, 8, 5, 7, 3]], [[]]], "atol": 0}
{"contract": "", "reference": "\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n", "base_input": [[[2, 4, 1, 3, 5, 7]], [[2, 4, 1, 3, 5, 7, 0]], [[1, 3, 2, 4, 5, 6, -2]], [[4, 5, 3, 6, 2, 7, -7]], [[7, 3, 8, 4, 9, 2, 5, -9]], [[]], [[0]], [[-1, -3, -5, -6]], [[-1, -3, -5, -6, 0]], [[-6, -4, -4, -3, 1]], [[-6, -4, -4, -3, -100, 1]]], "atol": 0}
{"contract": "\n    assert isinstance(a, (int, float, str)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float, str)), \"invalid inputs\" # $_CONTRACT_$\n    try: # $_CONTRACT_$\n        float(str(a).replace(\",\", \".\")) # $_CONTRACT_$\n        float(str(b).replace(\",\", \".\")) # $_CONTRACT_$\n    except ValueError: raise Exception(\"invalid inputs\") # $_CONTRACT_$\n", "reference": "\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n", "base_input": [[1, 2], [1, 2.5], [2, 3], [5, 6], [1, "2,3"], ["5,1", "6"], ["1", "2"], ["1", 1]], "atol": 0}
{"contract": "", "reference": "\n    return n >= 8 and n % 2 == 0\n\n", "base_input": [[4], [6], [8], [10], [11], [12], [13], [16]], "atol": 0}
{"contract": "\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    fac, ans = 1, 1\n    for i in range(2, n + 1):\n        fac *= i\n        ans *= fac\n    return ans\n\n", "base_input": [[4], [5], [7], [1]], "atol": 0}
{"contract": "", "reference": "\n    ans = text\n    for i in range(len(text)-1, 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n", "base_input": [["Example"], ["Mudasir Hanif "], ["Yellow Yellow  Dirty  Fellow"], ["Exa   mple"], ["   Exa 1 2 2 mple"]], "atol": 0}
{"contract": "", "reference": "\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n", "base_input": [["example.txt"], ["1example.dll"], ["s1sdf3.asd"], ["K.dll"], ["MY16FILE3.exe"], ["His12FILE94.exe"], ["_Y.txt"], ["?aREYA.exe"], ["/this_is_valid.dll"], ["this_is_valid.wow"], ["this_is_valid.txt"], ["this_is_valid.txtexe"], ["#this2_i4s_5valid.ten"], ["@this1_is6_valid.exe"], ["this_is_12valid.6exe4.txt"], ["all.exe.txt"], ["I563_No.exe"], ["Is3youfault.txt"], ["no_one#knows.dll"], ["1I563_Yes3.exe"], ["I563_Yes3.txtt"], ["final..txt"], ["final132"], ["_f4indsartal132."], [".txt"], ["s."]], "atol": 0}
{"contract": "", "reference": "\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n", "base_input": [[[1, 2, 3]], [[1, 4, 9]], [[]], [[1, 1, 1, 1, 1, 1, 1, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0]], [[-1, -5, 2, -1, -5]], [[-56, -99, 1, 0, -2]], [[-1, 0, 0, 0, 0, 0, 0, 0, -1]], [[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]], [[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]]], "atol": 0}
{"contract": "\n    assert 1 <= len(sentence) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    assert \"  \" not in sentence, \"invalid inputs\" # $_CONTRACT_$\n    assert all(word.isalpha() for word in sentence.split(\" \")), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n", "base_input": [["This is a test"], ["lets go for swimming"], ["there is no place available here"], ["Hi I am Hussein"], ["go for it"], ["here"], ["here is"]], "atol": 0}
{"contract": "\n    def contract(x): # $_CONTRACT_$\n        xs = x.split(\"/\") # $_CONTRACT_$\n        assert len(xs) == 2, \"invalid inputs\" # $_CONTRACT_$\n        assert xs[0].isdigit() and int(xs[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n        assert xs[1].isdigit() and int(xs[1]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    contract(x) # $_CONTRACT_$\n", "reference": "\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n", "base_input": [["1/5", "5/1"], ["1/6", "2/1"], ["5/1", "3/1"], ["7/10", "10/2"], ["2/10", "50/10"], ["7/2", "4/2"], ["11/6", "6/1"], ["2/3", "5/2"], ["5/2", "3/5"], ["2/4", "8/4"], ["2/4", "4/2"], ["1/5", "5/1"], ["1/5", "1/5"]], "atol": 0}
{"contract": "\n    assert all(type(x) == int for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n", "base_input": [[[1, 11, -1, -11, -12]], [[1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]], [[]], [[1, -11, -32, 43, 54, -98, 2, -3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [[0, 6, 6, -76, -21, 23, 4]]], "atol": 0}
{"contract": "", "reference": "\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n", "base_input": [[[5, -2, 1, -5]], [[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[43, -12, 93, 125, 121, 109]], [[71, -2, -33, 75, 21, 19]], [[1]], [[]]], "atol": 0}
{"contract": "\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n", "base_input": [[5], [6], [10], [100]], "atol": 0}
{"contract": "", "reference": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n", "base_input": [["Jupiter", "Neptune"], ["Jupiter", "Neptune"], ["Earth", "Mercury"], ["Earth", "Mercury"], ["Mercury", "Uranus"], ["Mercury", "Uranus"], ["Neptune", "Venus"], ["Neptune", "Venus"], ["Earth", "Earth"], ["Mars", "Earth"], ["Jupiter", "Makemake"]], "atol": 0}
{"contract": "\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == str for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n", "base_input": [[["aa", "a", "aaa"]], [["school", "AI", "asdf", "b"]], [["d", "b", "c", "a"]], [["d", "dcba", "abcd", "a"]], [["AI", "ai", "au"]], [["a", "b", "b", "c", "c", "a"]], [["aaaa", "bbbb", "dd", "cc"]]], "atol": 0}
{"contract": "", "reference": "\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n", "base_input": [[7, 34, 12], [15, 8, 5], [3, 33, 5212], [1259, 3, 52], [7919, -1, 12], [3609, 1245, 583], [91, 56, 129], [6, 34, 1234], [1, 2, 0], [2, 2, 0]], "atol": 0}
{"contract": "", "reference": "\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n", "base_inputatol": 0}
{"contract": "\n    assert len(game) == len(guess), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n", "base_input": [[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[1, 2, 3], [-1, -2, -3]], [[1, 2, 3, 5], [-1, 2, 3, 4]]], "atol": 0}
{"contract": "\n    assert len(extensions) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n", "base_input": [["Watashi", ["tEN", "niNE", "eIGHt8OKe"]], ["Boku123", ["nani", "NazeDa", "YEs.WeCaNe", "32145tggg"]], ["__YESIMHERE", ["t", "eMptY", "nothing", "zeR00", "NuLl__", "123NoooneB321"]], ["K", ["Ta", "TAR", "t234An", "cosSo"]], ["__HAHA", ["Tab", "123", "781345", "-_-"]], ["YameRore", ["HhAas", "okIWILL123", "WorkOut", "Fails", "-_-"]], ["finNNalLLly", ["Die", "NowW", "Wow", "WoW"]], ["_", ["Bb", "91245"]], ["Sp", ["671235", "Bb"]]], "atol": 0}
{"contract": "", "reference": "\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n", "base_input": [["xyzw", "xyw"], ["yello", "ell"], ["whattup", "ptut"], ["efef", "fee"], ["abab", "aabb"], ["winemtt", "tinem"]], "atol": 0}
{"contract": "\n    assert type(num) == int, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n", "base_input": [[7], [-78], [3452], [346211], [-345821], [-2], [-45347], [0]], "atol": 0}
{"contract": "\n    assert 1 <= number <= 1000, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n", "base_input": [[19], [152], [251], [426], [500], [1], [4], [43], [90], [94], [532], [900], [994], [1000]], "atol": 0}
{"contract": "\n    assert a > 0 and b > 0 and c > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n", "base_input": [[3, 4, 5], [1, 2, 3], [10, 6, 8], [2, 2, 2], [7, 24, 25], [10, 5, 7], [5, 12, 13], [15, 8, 17], [48, 55, 73], [1, 1, 1], [2, 2, 10]], "atol": 0}
{"contract": "\n    assert len(words) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n", "base_input": [[["name", "of", "string"]], [["name", "enam", "game"]], [["aaaaaaa", "bb", "cc"]], [["abc", "cba"]], [["play", "this", "game", "of", "footbott"]], [["we", "are", "gonna", "rock"]], [["we", "are", "a", "mad", "nation"]], [["this", "is", "a", "prrk"]], [["b"]], [["play", "play", "play"]]], "atol": 0}
{"contract": "\n    assert 0 <= number <= 1000, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= need <= 1000, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= remaining <= 1000, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n", "base_input": [[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [4, 5, 7], [4, 5, 1]], "atol": 0}
{"contract": "\n    assert len(operator) >= 1, \"invalid inputs\" # $_CONTRACT_$\n    assert len(operand) == len(operator) + 1, \"invalid inputs\" # $_CONTRACT_$\n    assert all(x >= 0 for x in operand), \"invalid inputs\" # $_CONTRACT_$\n    assert all(sgn in [\"+\", \"-\", \"*\", \"//\", \"**\"] for sgn in operator), \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n", "base_input": [[["**", "*", "+"], [2, 3, 4, 5]], [["+", "*", "-"], [2, 3, 4, 5]], [["//", "*"], [7, 3, 4]]], "atol": 0}
{"contract": "", "reference": "\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n", "base_input": [["AsDf"], ["1234"], ["ab"], ["#a@C"], ["#AsdfW^45"], ["#6@2"], ["#$a^D"], ["#ccc"]], "atol": 0}
{"contract": "", "reference": "\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n", "base_input": [["Hello world"], [""], ["A B C"], ["password"]], "atol": 0}
{"contract": "\n    assert a > 0 and b > 0, \"invalid inputs\" # $_CONTRACT_$\n", "reference": "\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n", "base_input": [[2, 10], [10, 2], [132, 2], [17, 89]], "atol": 0}
