import argparse
import os
from os import PathLike

from eval_plus.utils import get_human_eval
from model import HFTorchDecoder, make_model


def code_generate(args, workdir: PathLike, model: HFTorchDecoder):
    for task in get_human_eval():
        p_name = task["task_id"].replace("/", "_")
        os.makedirs(os.path.join(workdir, p_name), exist_ok=True)
        print(f"Code generation for {p_name} @ {model}")
        for l_samples in range(args.n_samples, 0, -args.bs):
            outputs = model.codegen(task["prompt"], num_samples=l_samples)
            for i, impl in enumerate(outputs):
                with open(
                    os.path.join(
                        workdir, p_name, "{}.py".format(args.n_samples - l_samples + i)
                    ),
                    "w",
                ) as f:
                    f.write(task["prompt"] + impl)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", required=True, type=str)
    parser.add_argument("--bs", required=True, type=int)
    parser.add_argument("--temperature", required=True, type=float)
    parser.add_argument("--dataset", default="humaneval", type=str)
    parser.add_argument("--root", default="/JawTitan/EvalPlus", type=str)
    parser.add_argument("--n_samples", default=200, type=int)
    args = parser.parse_args()

    if args.dataset not in ["humaneval"]:
        raise NotImplementedError("Unsupported dataset: {}".format(args.dataset))

    # Make project dir
    os.makedirs(args.root, exist_ok=True)
    # Make dataset dir
    os.makedirs(os.path.join(args.root, args.dataset), exist_ok=True)
    # Make dir for codes generated by each model
    args.model = args.model.lower()
    model = make_model(
        name=args.model, batch_size=args.bs, temperature=args.temperature
    )
    workdir = os.path.join(
        args.root, args.dataset, args.model + f"_temp_{args.temperature}"
    )
    os.makedirs(workdir, exist_ok=True)

    with open(os.path.join(workdir, "args.txt"), "w") as f:
        f.write(str(args))

    code_generate(args, workdir=workdir, model=model)


if __name__ == "__main__":
    main()
